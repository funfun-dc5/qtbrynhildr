common/netthread.h:  COM_DATA *com_data;
function/recorder.h:  // put com_data
function/recorder.h:  void putCOM_DATA(COM_DATA *com_data);
function/recorder.h:  // get com_data
function/recorder.h:	COM_DATA com_data;
common/netthread.cpp:  com_data(0),
common/netthread.cpp:  COM_DATA *com_data = (COM_DATA*)buf;
common/netthread.cpp:  long data_long = com_data->data_type + (com_data->data_size & 0x0000ffff);
common/netthread.cpp:  com_data->encryption = ENCRYPTION_OFF;
common/netthread.cpp:  com_data->check_digit = ~data_long;
common/netthread.cpp:	key_char += (char)((long)i * ~com_data->check_digit);
common/netthread.cpp:	com_data->check_digit_enc[i] = key_char;
common/netthread.cpp:  if (com_data == 0)
common/netthread.cpp:  cout << "com_data->data_type      :" << (int)com_data->data_type << endl;
common/netthread.cpp:  cout << "com_data->thread         :" << (int)com_data->thread << endl;
common/netthread.cpp:  cout << "com_data->sound_type     :" << (int)com_data->sound_type << endl;
common/netthread.cpp:  cout << "com_data->encryption     :" << (int)com_data->encryption << endl;
common/netthread.cpp:  cout << "com_data->data_size      :" << com_data->data_size << endl;
common/netthread.cpp:  cout << "com_data->check_digit_enc:" << hex << uppercase << setfill('0');
common/netthread.cpp:	cout << setw(2) << (int)(com_data->check_digit_enc[i] & 0xff);
common/netthread.cpp:  cout << "com_data->check_digit    :"	<< (int)(com_data->check_digit & 0xffff) << endl;
common/netthread.cpp:  cout << "com_data->ver            :\"" << com_data->ver[0]
common/netthread.cpp:										 << com_data->ver[1]
common/netthread.cpp:										 << com_data->ver[2]
common/netthread.cpp:										 << com_data->ver[3] << "\"" << endl;
common/netthread.cpp:  cout << "com_data->samplerate     :"  << com_data->samplerate << endl;
common/netthread.cpp:  cout << "com_data->image_cx       :"  << com_data->image_cx << endl;
common/netthread.cpp:  cout << "com_data->image_cy       :"  << com_data->image_cy << endl;
common/netthread.cpp:  cout << "com_data->server_cx      :"  << com_data->server_cx << endl;
common/netthread.cpp:  cout << "com_data->server_cy      :"  << com_data->server_cy << endl;
common/netthread.cpp:  cout << "com_data->control        :"	<< (int)com_data->control << endl;
common/netthread.cpp:  cout << "com_data->mouse_move     :"	<< (int)com_data->mouse_move << endl;
common/netthread.cpp:  cout << "com_data->mouse_x        :"  << com_data->mouse_x << endl;
common/netthread.cpp:  cout << "com_data->mouse_y        :"  << com_data->mouse_y << endl;
common/netthread.cpp:  cout << "com_data->mouse_left     :"  << (int)com_data->mouse_left << endl;
common/netthread.cpp:  cout << "com_data->mouse_right    :"  << (int)com_data->mouse_right << endl;
common/netthread.cpp:  cout << "com_data->mouse_wheel    :"  << (int)com_data->mouse_wheel << endl;
common/netthread.cpp:  cout << "com_data->keycode        :"  << (int)com_data->keycode << endl;
common/netthread.cpp:  cout << "com_data->keycode_flg    :"  << (int)com_data->keycode_flg << endl;
common/netthread.cpp:  cout << "com_data->monitor_no     :"	<< (int)com_data->monitor_no << endl;
common/netthread.cpp:  cout << "com_data->monitor_count  :"	<< (int)com_data->monitor_count << endl;
common/netthread.cpp:  cout << "com_data->sound_capture  :"	<< (int)com_data->sound_capture << endl;
common/netthread.cpp:  cout << "com_data->keydown        :"	<< com_data->keydown << endl;
common/netthread.cpp:  cout << "com_data->video_quality  :"	<< (int)com_data->video_quality << endl;
common/netthread.cpp:  cout << "com_data->client_scroll_x:"  << com_data->client_scroll_x << endl;
common/netthread.cpp:  cout << "com_data->client_scroll_y:"  << com_data->client_scroll_y << endl;
common/netthread.cpp:  cout << "com_data->zoom           :"  << com_data->zoom << endl;
common/netthread.cpp:  cout << "com_data->mode           :"	<< (int)com_data->mode << endl;
common/netthread.cpp:  cout << "com_data->sound_quality  :"	<< (int)com_data->sound_quality << endl;
common/netthread.cpp:	file.write((char *)com_data, sizeof(COM_DATA));
common/netthread.cpp:  if (com_data == 0)
common/netthread.cpp:  unsigned char *ptr = (unsigned char *)com_data;
control/controlthread.cpp:  if (com_data != 0){
control/controlthread.cpp:	delete com_data;
control/controlthread.cpp:	com_data = 0;
control/controlthread.cpp:  if (com_data == 0){
control/controlthread.cpp:	com_data = new COM_DATA;
control/controlthread.cpp:  // initialize header(com_data)
control/controlthread.cpp:		com_data->mouse_right = mouseInfo->value.button;
control/controlthread.cpp:		com_data->mouse_left = mouseInfo->value.button;
control/controlthread.cpp:		  com_data->mouse_middle = mouseInfo->value.button;
control/controlthread.cpp:		  com_data->mouse_x1 = mouseInfo->value.button;
control/controlthread.cpp:		  com_data->mouse_x2 = mouseInfo->value.button;
control/controlthread.cpp:		com_data->mouse_wheel = mouseInfo->value.wheel;
control/controlthread.cpp:	  com_data->mouse_move = MOUSE_MOVE_ON;
control/controlthread.cpp:		  com_data->mouse_move = MOUSE_MOVE_OFF;
control/controlthread.cpp:			  com_data->mouse_x = pos.x * desktopSize.width()/windowSize.width() * scalingFactor
control/controlthread.cpp:			  com_data->mouse_y = pos.y * desktopSize.height()/windowSize.height() * scalingFactor
control/controlthread.cpp:			  com_data->mouse_x = pos.x * desktopSize.width()/windowSize.width()
control/controlthread.cpp:			  com_data->mouse_y = pos.y * desktopSize.height()/windowSize.height()
control/controlthread.cpp:			com_data->mouse_x = pos.x * desktopSize.width()/windowSize.width()
control/controlthread.cpp:			com_data->mouse_y = pos.y * desktopSize.height()/windowSize.height()
control/controlthread.cpp:		com_data->mouse_x = pos.x + settings->getDesktopOffsetX();
control/controlthread.cpp:		com_data->mouse_y = pos.y + settings->getDesktopOffsetY();
control/controlthread.cpp:	  com_data->keycode = keyInfo->keycode;
control/controlthread.cpp:	  com_data->keycode_flg = keyInfo->keycode_flg;
control/controlthread.cpp:	com_data->keydown = keydown;
control/controlthread.cpp:  cout << "keycode     = " << hex << (int)com_data->keycode << endl;
control/controlthread.cpp:  cout << "keycode_flg = " << hex << (int)com_data->keycode_flg << endl;
control/controlthread.cpp:  cout << "keydown     = " << hex << (int)com_data->keydown << endl << flush;
control/controlthread.cpp:	  // override com_data
control/controlthread.cpp:	  memcpy(com_data, recordedCOM_DATA, sizeof(COM_DATA));
control/controlthread.cpp:	recorder->putCOM_DATA(com_data);
control/controlthread.cpp:  sentMode = com_data->mode;
control/controlthread.cpp:  dataSize = sendHeader(sock_control, (char *)com_data, sizeof(COM_DATA));
control/controlthread.cpp:	if (com_data->data_type == DATA_TYPE_CLIPBOARD &&
control/controlthread.cpp:	else if (com_data->data_type == DATA_TYPE_FILE &&
control/controlthread.cpp:  dataSize = receiveData(sock_control, (char *)com_data, sizeof(COM_DATA));
control/controlthread.cpp:  if (com_data->mode != sentMode){
control/controlthread.cpp:    switch((int)com_data->mode){
control/controlthread.cpp:	  cout << "Unknown Error...: com_data->mode = " << (int)com_data->mode << endl << flush;
control/controlthread.cpp:	//	cout << "[ControlThread] server_cx = " << com_data->server_cx << endl << flush;
control/controlthread.cpp:	//	cout << "[ControlThread] server_cy = " << com_data->server_cy << endl << flush;
control/controlthread.cpp:	settings->setDesktopWidth(com_data->server_cx);
control/controlthread.cpp:	settings->setDesktopHeight(com_data->server_cy);
control/controlthread.cpp:	  com_data->server_version = SERVER_VERSION_BRYNHILDR;
control/controlthread.cpp:	if (serverVersion != com_data->server_version){
control/controlthread.cpp:	  serverVersion = com_data->server_version;
control/controlthread.cpp:  if (monitorCount != com_data->monitor_count){
control/controlthread.cpp:	monitorCount = com_data->monitor_count;
control/controlthread.cpp:	if (com_data->data_type == DATA_TYPE_CLIPBOARD &&
control/controlthread.cpp:	else if (com_data->data_type == DATA_TYPE_FILE &&
control/controlthread.cpp:  memset(com_data, 0, sizeof(COM_DATA));
control/controlthread.cpp:  memcpy(com_data->ver,
control/controlthread.cpp:  com_data->data_type	= DATA_TYPE_DATA;
control/controlthread.cpp:	com_data->data_type	= DATA_TYPE_CLIPBOARD;
control/controlthread.cpp:	com_data->data_size = settings->getSendClipboardString().size() * 2 + 16;
control/controlthread.cpp:	com_data->data_type	= DATA_TYPE_FILE;
control/controlthread.cpp:	com_data->data_size = fileSize & 0xFFFFFFFF;
control/controlthread.cpp:	  *((SIZE*)(com_data->dummy3)) = ((fileSize & 0xFFFFFFFF00000000) >> 32);
control/controlthread.cpp:  com_data->thread		= THREAD_CONTROL;
control/controlthread.cpp:  com_data->mode		= settings->getPublicModeVersion();
control/controlthread.cpp:  com_data->mode		= MODE_PUBLIC5;
control/controlthread.cpp:  com_data->monitor_no	= settings->getMonitorNo();
control/controlthread.cpp:	com_data->mouse_cursor = settings->getOnDisplayCursor() ? MOUSE_CURSOR_ON : MOUSE_CURSOR_OFF;
control/controlthread.cpp:  com_data->control		= settings->getOnControl() ? CONTROL_ON : CONTROL_OFF;
control/controlthread.cpp:  com_data->plugins_disable = settings->getOnPluginsDisable() ? PLUGINS_DISABLE_ON : PLUGINS_DISABLE_OFF;
control/controlthread.cpp:  com_data->mouse_move	= MOUSE_MOVE_OFF;
control/controlthread.cpp:  com_data->mouse_x		= (POS)0;
control/controlthread.cpp:  com_data->mouse_y		= (POS)0;
control/controlthread.cpp:  com_data->mouse_left	= (POS)0;
control/controlthread.cpp:  com_data->mouse_right	= (POS)0;
control/controlthread.cpp:  com_data->mouse_wheel	= (MOUSE_WHEEL)0;
control/controlthread.cpp:  com_data->keycode		= (char)VK_NONE_00;
control/controlthread.cpp:  com_data->keycode_flg	= KEYCODE_FLG_KEYUP;
control/controlthread.cpp:  com_data->keydown		= KEYDOWN_OFF;
control/controlthread.cpp:  com_data->zoom			= (ZOOM)1.0;
control/controlthread.cpp:		com_data->zoom	= (ZOOM)settings->getDesktopScalingFactorForZoom();
control/controlthread.cpp:	com_data->image_cx			= (SIZE)settings->getDesktopWidth();
control/controlthread.cpp:	com_data->image_cy			= (SIZE)settings->getDesktopHeight();
control/controlthread.cpp:	com_data->client_scroll_x	= (POS)settings->getDesktopOffsetX();
control/controlthread.cpp:	com_data->client_scroll_y	= (POS)settings->getDesktopOffsetY();
control/controlthread.cpp:	com_data->video_quality		= settings->getVideoQuality();
control/controlthread.cpp:	com_data->image_cx			= (SIZE)settings->getDesktopWidth();
control/controlthread.cpp:	com_data->image_cy			= (SIZE)settings->getDesktopHeight();
control/controlthread.cpp:	//	com_data->image_cx			= (SIZE)8;
control/controlthread.cpp:	//	com_data->image_cy			= (SIZE)8;
control/controlthread.cpp:	com_data->client_scroll_x	= 0;
control/controlthread.cpp:	com_data->client_scroll_y	= 0;
control/controlthread.cpp:	com_data->video_quality		= VIDEO_QUALITY_MINIMUM;
control/controlthread.cpp:	com_data->sound_type = settings->getOnSound() ? SOUND_TYPE_PCM : SOUND_TYPE_OFF;
control/controlthread.cpp:	com_data->sound_type = settings->getOnSound() ? settings->getSoundType() : SOUND_TYPE_OFF;
control/controlthread.cpp:  com_data->sound_type		= settings->getOnSound() ? SOUND_TYPE_PCM : SOUND_TYPE_OFF;
control/controlthread.cpp:  com_data->sound_capture	= settings->getSoundCapture();
control/controlthread.cpp:  com_data->sound_quality	= settings->getSoundQuality();
control/controlthread.cpp:	com_data->gamepad1 = gamepad_btn.dwXpos;
control/controlthread.cpp:	com_data->gamepad2 = gamepad_btn.dwYpos;
control/controlthread.cpp:	com_data->gamepad3 = gamepad_btn.dwZpos;
control/controlthread.cpp:	com_data->gamepad4 = gamepad_btn.dwRpos;
control/controlthread.cpp:	com_data->gamepad5 = gamepad_btn.dwPOV;
control/controlthread.cpp:	com_data->gamepad6 = gamepad_btn.dwButtons;
control/controlthread.cpp:	com_data->gamepad7 = gamepad_btn.dwUpos;
control/controlthread.cpp:	com_data->gamepad8 = gamepad_btn.dwVpos;
control/controlthread.cpp:	com_data->gamepad1 = 0x7FFF;
control/controlthread.cpp:	com_data->gamepad2 = 0x7FFF;
control/controlthread.cpp:	com_data->gamepad3 = 0x7FFF;
control/controlthread.cpp:	com_data->gamepad4 = 0x7FFF;
control/controlthread.cpp:	com_data->gamepad5 = 0xFFFF;
control/controlthread.cpp:	com_data->gamepad6 = 0x0000;
control/controlthread.cpp:	com_data->gamepad7 = 0x0000;
control/controlthread.cpp:	com_data->gamepad8 = 0x0000;
control/controlthread.cpp:	com_data->gamepad1 = 0;
control/controlthread.cpp:	com_data->gamepad2 = 0;
control/controlthread.cpp:	com_data->gamepad3 = 0;
control/controlthread.cpp:	com_data->gamepad4 = 0;
control/controlthread.cpp:	com_data->gamepad5 = 0;
control/controlthread.cpp:	com_data->gamepad6 = 0;
control/controlthread.cpp:	com_data->gamepad7 = 0;
control/controlthread.cpp:	com_data->gamepad8 = 0;
control/controlthread.cpp:  SIZE clipboardSize = com_data->data_size;
control/controlthread.cpp:  qint64 fileSize = *((qint64*)&com_data->data_size);
control/controlthread.cpp:  qint64 fileSize = *((qint64*)&com_data->data_size);
function/recorder.cpp:  memset(&bodyEntry.com_data, 0, sizeof(COM_DATA)); // for warning
function/recorder.cpp:// put com_data
function/recorder.cpp:void Recorder::putCOM_DATA(COM_DATA *com_data)
function/recorder.cpp:  if (memcmp(&bodyEntry.com_data, com_data, sizeof(COM_DATA)) == 0){
function/recorder.cpp:	// found same com_data
function/recorder.cpp:	// found new com_data
function/recorder.cpp:		  cout << "Write : " << bodyEntry.counter << " : com_data" << endl << flush;
function/recorder.cpp:	// set new com_data
function/recorder.cpp:	memcpy(&bodyEntry.com_data, com_data, sizeof(COM_DATA));
function/recorder.cpp:// get com_data
function/recorder.cpp:  return &bodyEntry.com_data;
graphics/graphicsthread.cpp:  // com_data
graphics/graphicsthread.cpp:  if (com_data != 0){
graphics/graphicsthread.cpp:	delete com_data;
graphics/graphicsthread.cpp:	com_data = 0;
graphics/graphicsthread.cpp:  if (com_data == 0){
graphics/graphicsthread.cpp:	com_data = new COM_DATA;
graphics/graphicsthread.cpp:  dataSize = receiveData(sock_graphics, (char *)com_data, sizeof(COM_DATA));
graphics/graphicsthread.cpp:  if (com_data->video_mode != VIDEO_MODE_MJPEG){
graphics/graphicsthread.cpp:  long receivedDataSize = com_data->data_size;
sound/soundthread.cpp:  // com_data
sound/soundthread.cpp:  if (com_data != 0){
sound/soundthread.cpp:	delete com_data;
sound/soundthread.cpp:	com_data = 0;
sound/soundthread.cpp:  if (com_data == 0){
sound/soundthread.cpp:	com_data = new COM_DATA;
sound/soundthread.cpp:  dataSize = receiveData(sock_sound, (char *)com_data, sizeof(COM_DATA));
sound/soundthread.cpp:  if (com_data->samplerate != 0 && com_data->samplerate != samplerate){
sound/soundthread.cpp:	bool result = changeSamplerate(com_data->samplerate);
sound/soundthread.cpp:	  samplerate = com_data->samplerate;
sound/soundthread.cpp:  long receivedDataSize = com_data->data_size;
sound/soundthread.cpp:  if (com_data->sound_type == SOUND_TYPE_CELT){
