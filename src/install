#!/bin/bash
UNAME=`uname`
UNAMEM=`uname -m`
ARCH=x86
PORTABLEVERSION=OFF
export TARGET=$1

# check arg1
if [ -n "$1" ] ; then
	case $1 in
		clean)
			;;
		man)
			;;
		portable)
			PORTABLEVERSION=ON
			TARGET=
			;;
		cygwin)
			;;
		msvc64)
			ARCH=x86_64
			APPSUFIX=64
			;;
		msvc)
			ARCH=x86
			;;
		ubuntu64)
			;;
		ubuntu)
			;;
		*)
			echo "Unkown argument1 : $1"
			exit 1
			;;
	esac
fi

source ./setup_qt5

# check arg2
if [ -n "$2" ] ; then
	case $2 in
		clean)
			;;
		portable)
			PORTABLEVERSION=ON
			;;
		*)
			echo "Unkown argument2 : $2"
			exit 1
			;;
	esac
fi

# setting
APP="QtBrynhildr"
KLFC="klfc"
ISS="$APP.iss"
INSTALL="/usr/bin/install"
INSTALLFLAGS="-m444"
INSTALLEXEFLAGS="-C"
INSTALLDLLFLAGS="-C"
DATE=`date +%Y%m%d`

# check environment
case $UNAME in
	CYGWIN*)
		PKGNAME="windows"
		if [ -n "$TARGET" ] ; then
			case $TARGET in
				cygwin)
					UNAMEM=`uname -m`
					case $UNAMEM in
						x86_64)
							PKGNAME="cygwin_x64"
							echo "Installing for Cygwin x64..."
							;;
						x86)
							PKGNAME="cygwin_x86"
							echo "Installing for Cygwin x86..."
							;;
					esac
					DISTDIR="../dist/cygwin/$PKGNAME"
					;;
				clean)
					# for Text
					DISTDIR="../dist/windows"
					;;
				*)
					DISTDIR="../dist/windows"
					;;
			esac
		else
			DISTDIR="../dist/windows"
		fi
		;;
	Linux)
		UNAMEM=`uname -m`
		case $UNAMEM in
			x86_64)
				PKGNAME="linux_x64"
				echo "Installing for Linux x64..."
				;;
			i686)
				PKGNAME="linux_x86"
				echo "Installing for Linux x86..."
				;;
			armv6l)
				PKGNAME="linux_armv6l"
				echo "Installing for Linux armv6l..."
				;;
			armv7l)
				PKGNAME="linux_armv7l"
				echo "Installing for Linux armv7l..."
				;;
		esac
		if [ -n "$TARGET" ] ; then
			case $TARGET in
				ubuntu64)
					PKGNAME="ubuntu_x64"
					;;
				ubuntu)
					PKGNAME="ubuntu_x86"
					;;
			esac
			DISTDIR="../dist/linux/$PKGNAME"
		fi
		DISTDIR="../dist/linux/$PKGNAME"
		INSTALLEXEFLAGS="-s"
		;;
	FreeBSD)
		UNAMEM=`uname -m`
		case $UNAMEM in
			amd64)
				PKGNAME="freebsd_x64"
				echo "Installing for FreeBSD x64..."
				;;
			i386)
				PKGNAME="freebsd_x86"
				echo "Installing for FreeBSD x86..."
				;;
		esac
		DISTDIR="../dist/freebsd/$PKGNAME"
		INSTALLEXEFLAGS="-s"
		;;
	Darwin)
		UNAMEM=`uname -m`
		case $UNAMEM in
			x86_64)
				DISTDIR="../dist/macosx"
				PKGNAME="macosx_x64"
				echo "Installing for Darwin x64..."
				;;
		esac
		;;
	*)
		echo "$0 : Not support platform. $UNAME"
		exit 1;
		;;
esac

# clean
if [ "$TARGET" = "clean" -o "$2" = "clean" ] ; then
	echo "Cleaning..."
	if [ "${DISTDIR}" = "" ] ; then
		echo "DISTDIR is empty!! Please check!"
		exit 1;
	fi
	case $UNAME in
		CYGWIN*)
			# clean
			\rm -rf ${DISTDIR}/bin
			\rm -rf ${DISTDIR}/doc
			\rm -rf ${DISTDIR}/${ISS}
			;;
		Linux)
			# clean
			\rm -rf ${DISTDIR}
			;;
		Darwin)
			# clean
			\rm -rf ${DISTDIR}/*
			;;
		*)
			echo "$0 : Not support platform."
			exit 1;
			;;
	esac

	echo "$0 : Done."
	exit 0;
fi

# man
if [ "$TARGET" = "man" ] ; then
	echo "Installing manual..."
	case $UNAME in
		CYGWIN*)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		Linux)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		FreeBSD)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		Darwin)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		*)
			echo "$0 : Not support platform."
			exit 1;
			;;
	esac

	echo "$0 : Done."
	exit 0;
fi

# install
case $UNAME in
	CYGWIN*)
		# check
		if [ "$TARGET" = "" -o "$TARGET" = "msvc" -o "$TARGET" = "msvc64" ] ; then
			echo "Installing for windows..."
			if [ ! -x release/${APP}.exe ] ; then
				echo "NOT Found ${APP}.exe"
				exit 1;
			fi
			if [ ! -x keylayout/${KLFC}.exe ] ; then
				echo "NOT Found ${KLFC}.exe"
				exit 1;
			fi
			VERSION=`release/${APP}.exe -vv`
			# for windows
			# create directory
			mkdir -p ${DISTDIR}/bin
			echo "copy DLL files..."
			# for Qt DLL
			mkdir -p ${DISTDIR}/bin/platforms
			mkdir -p ${DISTDIR}/bin/imageformats
			mkdir -p ${DISTDIR}/bin/audio
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Core.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Gui.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Multimedia.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Network.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Widgets.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/Qt5Concurrent.dll ${DISTDIR}/bin
			if [ "$TARGET" = "" ] ; then
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/libgcc_s_dw2-1.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/libstdc++-6.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/bin/libwinpthread-1.dll ${DISTDIR}/bin
			fi
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/plugins/platforms/qwindows.dll ${DISTDIR}/bin/platforms
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/plugins/imageformats/qjpeg.dll ${DISTDIR}/bin/imageformats
			${INSTALL} ${INSTALLDLLFLAGS} ${QTROOT}/plugins/audio/qtaudio_windows.dll ${DISTDIR}/bin/audio
			# copy openssl dll
			${INSTALL} ${INSTALLDLLFLAGS} ${DISTDIR}/DLL/OpenSSL/${ARCH}/libeay32.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${DISTDIR}/DLL/OpenSSL/${ARCH}/libssl32.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLDLLFLAGS} ${DISTDIR}/DLL/OpenSSL/${ARCH}/ssleay32.dll ${DISTDIR}/bin
			# copy executable file
			echo "copy executable file..."
			${INSTALL} ${INSTALLEXEFLAGS} release/${APP}.exe ${DISTDIR}/bin
			# copy translation files for Qt
			mkdir -p ${DISTDIR}/bin/translations
			${INSTALL} ${INSTALLFLAGS} translations/qt_*.qm ${DISTDIR}/bin/translations
			# install key layout file compiler
			echo "install klfcompiler..."
			if [ "$TARGET" = "" ] ; then
				(cd keylayout; make)
			fi
			${INSTALL} ${INSTALLEXEFLAGS} keylayout/${KLFC}.exe ${DISTDIR}/bin
			# copy key layout file sample
			echo "copy key layout file sample..."
			mkdir -p ${DISTDIR}/bin/keylayout/sample
			${INSTALL} ${INSTALLFLAGS} keylayout/*.kl ${DISTDIR}/bin/keylayout/sample
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			pushd ../dist
			cd windows
			if [ "${PORTABLEVERSION}" = "OFF" ] ; then
				# create .iss
				echo "create .iss file"
				find bin -type f -print | sed -f ../script/iss.sed | awk -f ../script/iss.awk > tmp_bin.iss
				cd ..
				find doc/manual -type f -print | grep -v git | sed -f script/iss.sed | awk -f script/iss_manual.awk > tmp.iss
				cat windows/${ISS}.template | sed -f script/buildtool${1}.sed > new_template.iss
				cat new_template.iss windows/tmp_bin.iss tmp.iss > windows/${ISS}
				rm -f windows/tmp_bin.iss tmp.iss new_template.iss
			else
				# portable version package
				echo "create portable version package"
				# make package string
				PKGSTRING="${APP}${APPSUFIX}-${PKGNAME}-v${VERSION}-Portable"
				# 1) make top directory
				mkdir ${PKGSTRING}
				mkdir -p ${PKGSTRING}/doc/manual
				# 2) move bin into the directory
				mv bin ${PKGSTRING}
				# 3) copy doc into the directory
				# copy document file
				${INSTALL} ${INSTALLFLAGS} ../doc/ReadMe.txt ${PKGSTRING}/doc
				${INSTALL} ${INSTALLFLAGS} ../doc/LICENSE.txt ${PKGSTRING}/doc
				# copy manual file
				cp -r ../doc/manual/* ${PKGSTRING}/doc/manual
				rm -f ${PKGSTRING}/doc/manual/.gitkeep
				# 4) archive package
				#zip -9 -r ${PKGSTRING}.zip ${PKGSTRING}
				7z a -r -sfx ${PKGSTRING}.exe ${PKGSTRING}
			fi
			popd
		fi
		if [ "$TARGET" = "cygwin" ] ; then
			# check
			echo "Installing for cygwin..."
			if [ ! -x ./${APP} ] ; then
				echo "NOT Found ${APP}"
				exit 1;
			fi
			if [ ! -x keylayout/${KLFC} ] ; then
				echo "NOT Found ${KLFC}"
				exit 1;
			fi
			VERSION=`./${APP} -vv`
			# for cygwin
			# create directory
			mkdir -p ${DISTDIR}/bin
			mkdir -p ${DISTDIR}/doc/manual
			# copy executable file
			echo "copy executable file..."
			${INSTALL} ${INSTALLEXEFLAGS} ${APP} ${DISTDIR}/bin
			# copy translation files for Qt
			mkdir -p ${DISTDIR}/bin/translations
			${INSTALL} ${INSTALLFLAGS} translations/qt_*.qm ${DISTDIR}/bin/translations
			# install key layout file compiler
			echo "install klfcompiler..."
			${INSTALL} ${INSTALLEXEFLAGS} keylayout/${KLFC}.exe ${DISTDIR}/bin
			# copy key layout file sample
			echo "copy key layout file sample..."
			mkdir -p ${DISTDIR}/bin/keylayout/sample
			${INSTALL} ${INSTALLFLAGS} keylayout/*.kl ${DISTDIR}/bin/keylayout/sample
			# copy document file
			${INSTALL} ${INSTALLFLAGS} ../dist/doc/ReadMe.txt ${DISTDIR}/doc
			${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			cp -r ../dist/doc/manual/* ${DISTDIR}/doc/manual
			rm -f ${DISTDIR}/doc/manual/.gitkeep
			# make package string
			#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
			PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
			(cd ../dist/cygwin; tar cvfj ${PKGSTRING}.tar.bz2 ${PKGNAME})
		fi
		;;
	Linux)
		# check
		echo "Installing for linux..."
		if [ ! -x ./${APP} ] ; then
			echo "NOT Found ${APP}"
			exit 1;
		fi
		if [ ! -x keylayout/${KLFC} ] ; then
			echo "NOT Found ${KLFC}"
			exit 1;
		fi
		VERSION=`./${APP} -vv`
		# for linux
		# create directory
		mkdir -p ${DISTDIR}/bin
		mkdir -p ${DISTDIR}/doc/manual
		# copy executable file
		echo "copy executable file..."
		${INSTALL} ${INSTALLEXEFLAGS} ${APP} ${DISTDIR}/bin
		# copy translation files for Qt
		mkdir -p ${DISTDIR}/bin/translations
		${INSTALL} ${INSTALLFLAGS} translations/qt_*.qm ${DISTDIR}/bin/translations
		# install key layout file compiler
		echo "install klfcompiler..."
		${INSTALL} ${INSTALLEXEFLAGS} keylayout/${KLFC} ${DISTDIR}/bin
		# copy key layout file sample
		echo "copy key layout file sample..."
		mkdir -p ${DISTDIR}/bin/keylayout/sample
		${INSTALL} ${INSTALLFLAGS} keylayout/*.kl ${DISTDIR}/bin/keylayout/sample
		# copy document file
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/ReadMe.txt ${DISTDIR}/doc
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
		# copy manual file
		pushd ../doc/manual
		make html
		make install
		popd
		cp -r ../dist/doc/manual/* ${DISTDIR}/doc/manual
		rm -f ${DISTDIR}/doc/manual/.gitkeep
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
#		(cd ../dist/linux; tar cvfJ ${PKGSTRING}.tar.xz ${PKGNAME})
		(cd ../dist/linux; zip -r -9 ${PKGSTRING}_tmp.zip ${PKGNAME}; cat /usr/bin/unzipsfx ${PKGSTRING}_tmp.zip > ${PKGSTRING}.run; zip -A ${PKGSTRING}.run; \rm ${PKGSTRING}_tmp.zip)
		;;
	FreeBSD)
		# check
		echo "Installing for freebsd..."
		if [ ! -x ./${APP} ] ; then
			echo "NOT Found ${APP}"
			exit 1;
		fi
		if [ ! -x keylayout/${KLFC} ] ; then
			echo "NOT Found ${KLFC}"
			exit 1;
		fi
		VERSION=`./${APP} -vv`
		# for freebsd
		# create directory
		mkdir -p ${DISTDIR}/bin
		mkdir -p ${DISTDIR}/doc/manual
		# copy executable file
		echo "copy executable file..."
		${INSTALL} ${INSTALLEXEFLAGS} ${APP} ${DISTDIR}/bin
		# copy translation files for Qt
		mkdir -p ${DISTDIR}/bin/translations
		${INSTALL} ${INSTALLFLAGS} translations/qt_*.qm ${DISTDIR}/bin/translations
		# install key layout file compiler
		echo "install klfcompiler..."
		${INSTALL} ${INSTALLEXEFLAGS} keylayout/${KLFC} ${DISTDIR}/bin
		# copy key layout file sample
		echo "copy key layout file sample..."
		mkdir -p ${DISTDIR}/bin/keylayout/sample
		${INSTALL} ${INSTALLFLAGS} keylayout/*.kl ${DISTDIR}/bin/keylayout/sample
		# copy document file
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/ReadMe.txt ${DISTDIR}/doc
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
		# copy manual file
		pushd ../doc/manual
		make html
		make install
		popd
		cp -r ../dist/doc/manual/* ${DISTDIR}/doc/manual
		rm -f ${DISTDIR}/doc/manual/.gitkeep
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
		(cd ../dist/freebsd; tar cvfJ ${PKGSTRING}.tar.xz ${PKGNAME})
#		(cd ../dist/freebsd; zip -r -9 ${PKGSTRING}_tmp.zip ${PKGNAME}; cat /usr/bin/unzipsfx ${PKGSTRING}_tmp.zip > ${PKGSTRING}.run; zip -A ${PKGSTRING}.run; \rm ${PKGSTRING}_tmp.zip)
		;;
	Darwin)
		echo "Installing for Darwin..."
		if [ ! -x ./${APP}.app ] ; then
			echo "NOT Found ${APP}.app"
			exit 1;
		fi
		if [ ! -x keylayout/${KLFC} ] ; then
			echo "NOT Found ${KLFC}"
			exit 1;
		fi
		# strip
		strip ${APP}.app/Contents/MacOS/${APP}
		# copy translation files for Qt
		echo "copy translations files for Qt..."
		mkdir -p ${APP}.app/Contents/MacOS/translations
		${INSTALL} ${INSTALLFLAGS} translations/qt_*.qm ${APP}.app/Contents/MacOS/translations
		# install key layout file compiler
		echo "install klfcompiler..."
		${INSTALL} ${INSTALLEXEFLAGS} keylayout/${KLFC} ${APP}.app/Contents/MacOS/
		# copy key layout file sample
		echo "copy key layout file sample..."
		mkdir -p ${APP}.app/Contents/MacOS/keylayout/sample
		${INSTALL} ${INSTALLFLAGS} keylayout/*.kl ${APP}.app/Contents/MacOS/keylayout/sample
		VERSION=`${APP}.app/Contents/MacOS/${APP} -vv`
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
		# for darwin
		# create directory
		mkdir -p ${DISTDIR}
		# make dmg
		${QTROOT}/bin/macdeployqt ${APP}.app -dmg
		# mv dist directory
		mv ${APP}.dmg ${DISTDIR}/${PKGSTRING}.dmg
		;;
	*)
		echo "$0 : Not support platform. $UNAME"
		exit 1;
		;;
esac
echo "$0 : Done."
