#!/bin/bash
UNAME=`uname`
UNAMEM=`uname -m`

source ./setup_qt5

# check arg1
if [ -n "$1" ] ; then
	case $1 in
		clean)
			;;
		man)
			;;
		static)
			echo "install static binary..."
			if [ ! -e ./qtbrynhildr_plugin_import.cpp ] ; then
			   echo "Not exist: qtbrynhildr_plugin_import.cpp. Please check static build."
			   exit 1;
			fi
			;;
		*)
			echo "Unkown argument : $1"
			exit 1
			;;
	esac
fi

# setting
APP="qtbrynhildr"
APPNAME="QtBrynhildr"
ISS="$APP.iss"
INSTALL="/usr/bin/install"
INSTALLFLAGS="-C"
DATE=`date +%Y%m%d`

# check environment
case $UNAME in
	CYGWIN*)
		DISTDIR="../dist/windows"
		;;
	Linux)
		UNAMEM=`uname -m`
		case $UNAMEM in
			x86_64)
				DISTDIR="../dist/linux/linux_x64"
				PKGNAME="linux_x64"
				echo "Installing for Linux x64..."
				;;
			i686)
				DISTDIR="../dist/linux/linux_x86"
				PKGNAME="linux_x86"
				echo "Installing for Linux x86..."
				;;
		esac
		;;
	FreeBSD)
		UNAMEM=`uname -m`
		case $UNAMEM in
			amd64)
				DISTDIR="../dist/linux/freebsd_x64"
				PKGNAME="freebsd_x64"
				echo "Installing for FreeBSD x64..."
				;;
			i386)
				DISTDIR="../dist/linux/freebsd_x86"
				PKGNAME="freebsd_x86"
				echo "Installing for FreeBSD x86..."
				;;
		esac
		;;
	Darwin)
		UNAMEM=`uname -m`
		case $UNAMEM in
			x86_64)
				DISTDIR="../dist/macosx"
				PKGNAME="macosx_x64"
				echo "Installing for Darwin x64..."
				;;
		esac
		;;
	*)
		echo "install : Not support platform. $UNAME"
		exit 1;
		;;
esac

# clean
if [ "$1" = "clean" ] ; then
	echo "Cleaning..."
	case $UNAME in
		CYGWIN*)
			# clean
			\rm -rf ${DISTDIR}/bin
			\rm -rf ${DISTDIR}/${ISS}
			;;
		Linux)
			# clean
			\rm -rf ${DISTDIR}/bin
			\rm -rf ${DISTDIR}/doc
			;;
		Darwin)
			# clean
			\rm -rf ${DISTDIR}/*
			;;
		*)
			echo "install : Not support platform."
			exit 1;
			;;
	esac

	echo "install : Done."
	exit 0;
fi

# man
if [ "$1" = "man" ] ; then
	echo "Installing manual..."
	case $UNAME in
		CYGWIN*)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		Linux)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		FreeBSD)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		Darwin)
			# copy manual file
			pushd ../doc/manual
			make html
			make install
			popd
			exit 0;
			;;
		*)
			echo "install : Not support platform."
			exit 1;
			;;
	esac

	echo "install : Done."
	exit 0;
fi

# install
case $UNAME in
	CYGWIN*)
		# check
		echo "Installing for windows..."
		if [ ! -x release/${APP}.exe ] ; then
			echo "NOT Found ${APP}.exe"
			exit 1;
		fi
		VERSION=`release/${APP}.exe -vv`
		# make package string
		PKGSTRING="${APP}-windows-v${VERSION}-${DATE}.exe"
		# for windows
		# create directory
		mkdir -p ${DISTDIR}/bin
		# install files (DLL)
		if [ "$1" != "static" ] ; then
			echo "copy DLL files..."
			# for Qt DLL
			mkdir -p ${DISTDIR}/bin/platforms
			mkdir -p ${DISTDIR}/bin/imageformats
			mkdir -p ${DISTDIR}/bin/audio
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/Qt5Core.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/Qt5Gui.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/Qt5Multimedia.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/Qt5Network.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/Qt5Widgets.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/libgcc_s_dw2-1.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/libstdc++-6.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/libwinpthread-1.dll ${DISTDIR}/bin
#			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/icudt54.dll ${DISTDIR}/bin
#			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/icuin54.dll ${DISTDIR}/bin
#			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/bin/icuuc54.dll ${DISTDIR}/bin
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/plugins/platforms/qwindows.dll ${DISTDIR}/bin/platforms
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/plugins/imageformats/qjpeg.dll ${DISTDIR}/bin/imageformats
			${INSTALL} ${INSTALLFLAGS} ${QTROOT}/plugins/audio/qtaudio_windows.dll ${DISTDIR}/bin/audio
		fi
		# copy executable file
		echo "copy executable file..."
		${INSTALL} ${INSTALLFLAGS} release/${APP}.exe ${DISTDIR}/bin
		# copy document file
		#mkdir -p ${DISTDIR}/doc
		#${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
		# copy manual file
		pushd ../doc/manual
		make html
		make install
		popd
		# create .iss
		echo "create .iss file"
		pushd ../dist
		cd windows
		find bin -type f -print | sed -f ../script/iss.sed | awk -f ../script/iss_bin.awk > tmp_bin.iss
		cd ..
		find doc/manual -type f -print | grep -v git | sed -f script/iss.sed | awk -f script/iss.awk > tmp.iss
		cat windows/${ISS}.template windows/tmp_bin.iss tmp.iss > windows/${ISS}
		rm -f windows/tmp_bin.iss tmp.iss
		popd
		echo "install : Done."
		;;
	Linux)
		# check
		echo "Installing for linux..."
		if [ ! -x ./${APP} ] ; then
			echo "NOT Found ${APP}"
			exit 1;
		fi
		VERSION=`${APP} -vv`
		# for linux
		# create directory
		mkdir -p ${DISTDIR}/bin
		mkdir -p ${DISTDIR}/doc/manual
		# copy executable file
		echo "copy executable file..."
		${INSTALL} ${INSTALLFLAGS} ${APP} ${DISTDIR}/bin
		# copy document file
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/ReadMe.txt ${DISTDIR}/doc
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
		# copy manual file
		pushd ../doc/manual
		make html
		make install
		popd
		cp -r ../dist/doc/manual/* ${DISTDIR}/doc/manual
		rm ${DISTDIR}/doc/manual/.gitkeep
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
		(cd ../dist/linux; tar cvfJ ${PKGSTRING}.tar.xz ${PKGNAME})
		(cd ../dist/linux; zip -r -9 ${PKGSTRING}_tmp.zip ${PKGNAME}; cat /usr/bin/unzipsfx ${PKGSTRING}_tmp.zip > ${PKGSTRING}.run; zip -A ${PKGSTRING}.run; \rm ${PKGSTRING}_tmp.zip)
		echo "install : Done."
		;;
	FreeBSD)
		# check
		echo "Installing for freebsd..."
		if [ ! -x ./${APP} ] ; then
			echo "NOT Found ${APP}"
			exit 1;
		fi
		VERSION=`${APP} -vv`
		# for freebsd
		# create directory
		mkdir -p ${DISTDIR}/bin
		mkdir -p ${DISTDIR}/doc/manual
		# copy executable file
		echo "copy executable file..."
		${INSTALL} ${INSTALLFLAGS} ${APP} ${DISTDIR}/bin
		# copy document file
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/ReadMe.txt ${DISTDIR}/doc
		${INSTALL} ${INSTALLFLAGS} ../dist/doc/LICENSE.txt ${DISTDIR}/doc
		# copy manual file
		pushd ../doc/manual
		make html
		make install
		popd
		cp -r ../dist/doc/manual/* ${DISTDIR}/doc/manual
		rm ${DISTDIR}/doc/manual/.gitkeep
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
		(cd ../dist/freebsd; tar cvfJ ${PKGSTRING}.tar.xz ${PKGNAME})
#		(cd ../dist/freebsd; zip -r -9 ${PKGSTRING}_tmp.zip ${PKGNAME}; cat /usr/bin/unzipsfx ${PKGSTRING}_tmp.zip > ${PKGSTRING}.run; zip -A ${PKGSTRING}.run; \rm ${PKGSTRING}_tmp.zip)
		echo "install : Done."
		;;
	Darwin)
		echo "Installing for Darwin..."
		if [ ! -x ./${APP}.app ] ; then
			echo "NOT Found ${APP}.app"
			exit 1;
		fi
		VERSION=`${APP}.app/Contents/MacOS/${APP} -vv`
		# make package string
		#PKGSTRING="${APP}-${PKGNAME}-v${VERSION}-${DATE}"
		PKGSTRING="${APP}-${PKGNAME}-v${VERSION}"
		# for darwin
		# create directory
		mkdir -p ${DISTDIR}
		# rename to APPNAME
		mv ${APP}.app ${APPNAME}.app
		# make dmg
		${QTROOT}/bin/macdeployqt ${APPNAME}.app -dmg
		# rename to APP
		mv ${APPNAME}.app ${APP}.app
		# mv dist directory
		mv ${APPNAME}.dmg ${DISTDIR}/${PKGSTRING}.dmg
		echo "install : Done."
		;;
	*)
		echo "install : Not support platform."
		;;
esac
